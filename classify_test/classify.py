# -*- coding: utf-8 -*-
"""classify

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18JN2XfqaDVW2ixQtgbGpLkWlt_Zb2Zbg
"""

import tensorflow as tf
from tensorflow import keras
from keras import layers
import numpy as np
from keras.utils import plot_model
import io
import pandas as pd

data = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/POWHacks/Dataset.xlsx')

query = input('희망 학과: ')

first_idx = data.shape[0]-1
for i in range(data.shape[0]-1):
  if query == data.iloc[i+1,15]:
    if first_idx < i:
      continue
    first_idx = i

for i in range(data.shape[0]-1):
  if query == data.iloc[i+1,15] and query != data.iloc[i+2,15]:
    end_idx = i
    break;

data_num = end_idx - first_idx + 1

dataset = [[0 for col in range(data.shape[1]-5)] for row in range(data_num)]
for i in range(first_idx,end_idx+1):
  dataset[i-first_idx] = list(data.iloc[i+1,4:15])

# 가상의 학생 데이터 생성
num_students = data.shape[0]-1
num_courses = 11
student_data = tf.random.uniform((data_num, num_courses), minval=0, maxval=2, dtype=tf.int32)

# 1. 리스트를 넘파이 배열로 변환
data_array = np.array(dataset)

# 2. 넘파이 배열을 텐서플로우 텐서로 변환
data_labels= tf.constant(data_array, dtype=tf.int32)

# 학생 시간표 추천 모델 생성
model = keras.Sequential([
    layers.Input(shape=(num_courses,)),
    layers.Dense(64, activation='relu'),
    layers.Dense(32, activation='relu'),
    layers.Dense(num_courses, activation='softmax')
])

# 모델 컴파일
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 모델 학습
model.fit(student_data, data_labels, epochs=7, batch_size=16)

# 학생에게 시간표 추천
student_id = 0  # 추천을 받을 학생의 인덱스
input_data = tf.expand_dims(student_data[student_id], axis=0)
recommended_schedule = model.predict(input_data)

# 확률을 내림차순으로 정렬하여 상위 열 개 선택
top_ten_indices = np.argsort(recommended_schedule[0])[::-1][:10]

# 상위 열 개 과목과 확률 출력
for i, index in enumerate(top_ten_indices):
    probability = recommended_schedule[0][index]
    print(f"Rank {i + 1}: Course {index + 1} with Probability {probability:.4f}")

plot_model(model)
